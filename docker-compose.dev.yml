version: '3.8'

services:
  # Development FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: amazon-product-api-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - RELOAD=true
      - DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/amazon_product_db_dev
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
      - /app/__pycache__
      - ./logs:/app/logs
    networks:
      - dev-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # PostgreSQL Database (Development)
  db:
    image: postgres:15
    container_name: amazon-product-db-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=amazon_product_db_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-dev-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    networks:
      - dev-network

  # Redis Cache (Development)
  redis:
    image: redis:7-alpine
    container_name: amazon-product-redis-dev
    restart: unless-stopped
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_dev_data:/data
    networks:
      - dev-network
    command: redis-server --appendonly yes

  # Adminer for database management
  adminer:
    image: adminer
    container_name: amazon-product-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - dev-network
    depends_on:
      - db

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: amazon-product-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - dev-network
    depends_on:
      - redis

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog
    container_name: amazon-product-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - dev-network

  # Test database for running tests
  test-db:
    image: postgres:15
    container_name: amazon-product-test-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=test_db
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    ports:
      - "5434:5432"
    networks:
      - dev-network
    profiles:
      - testing

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  dev-network:
    driver: bridge