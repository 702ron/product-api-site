[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "amazon-product-intelligence-platform"
version = "1.0.0"
description = "API-first, credit-based SaaS platform for Amazon product intelligence"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
keywords = ["amazon", "product", "api", "ecommerce", "intelligence"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.12.1",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "bcrypt>=4.0.1",
    "passlib[bcrypt]>=1.7.4",
    "httpx>=0.24.1",
    "stripe>=7.8.0",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "python-dateutil>=2.8.2",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "orjson>=3.9.10",
    "psutil>=5.9.0",
    "aiosqlite>=0.21.0",
    "redis>=6.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.6.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "ipdb>=0.13.13",
    "debugpy>=1.8.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
]

prod = [
    "gunicorn>=21.2.0",
    "psycopg2-binary>=2.9.9",
]

[project.urls]
Homepage = "https://github.com/yourusername/amazon-product-intelligence-platform"
Documentation = "https://yourusername.github.io/amazon-product-intelligence-platform"
Repository = "https://github.com/yourusername/amazon-product-intelligence-platform"
"Bug Tracker" = "https://github.com/yourusername/amazon-product-intelligence-platform/issues"

[project.scripts]
amazon-api = "app.main:main"

# Tool configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "Q",   # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"app/tests/**/*" = ["S101", "S311"]

[tool.ruff.isort]
known-first-party = ["app"]

[tool.black]
target-version = ['py311']
line-length = 100
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["app"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "supabase.*",
    "stripe.*",
    "aioredis.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "auth: Authentication related tests",
    "payment: Payment related tests",
    "amazon_api: Amazon API related tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "app/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["app/tests"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/conftest.py"]

[tool.hatch.build.targets.wheel]
packages = ["app"]
