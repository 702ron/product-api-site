version: '3.8'

services:
  # Application Service
  app:
    image: amazon-product-api:latest
    container_name: amazon-product-api
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ENV=production
    ports:
      - "8000:8000"
    environment:
      - ENV_FILE=.env.production
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    restart: always
    networks:
      - app-network
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: amazon-product-db
    environment:
      POSTGRES_DB: amazon_product_api
      POSTGRES_USER: ${DB_USER:-apiuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-apiuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: amazon-product-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: amazon-product-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - app
    restart: always
    networks:
      - app-network

  # Celery Worker (for background tasks)
  celery-worker:
    image: amazon-product-api:latest
    container_name: amazon-product-celery-worker
    command: celery -A app.workers worker --loglevel=info
    env_file:
      - .env.production
    depends_on:
      - redis
      - postgres
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Celery Beat (for scheduled tasks)
  celery-beat:
    image: amazon-product-api:latest
    container_name: amazon-product-celery-beat
    command: celery -A app.workers beat --loglevel=info
    env_file:
      - .env.production
    depends_on:
      - redis
      - postgres
    restart: always
    networks:
      - app-network

  # Prometheus (for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: amazon-product-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: always
    networks:
      - app-network

  # Grafana (for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: amazon-product-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: